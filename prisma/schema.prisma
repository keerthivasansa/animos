// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Genre {
  malId Int    @id
  name  String @unique
}

model Global {
  id     Int @id
  visits Int
}

model SkipTime {
  type                String
  start               Float
  end                 Float
  Episode             Episode? @relation(fields: [episodeAnimeKitsuId, episodeNumber], references: [animeKitsuId, number])
  episodeAnimeKitsuId Int
  episodeNumber       Int

  @@id([episodeAnimeKitsuId, episodeNumber, type])
  @@index([episodeAnimeKitsuId, episodeNumber])
}

model Source {
  episodeId   String
  Episode     Episode? @relation(fields: [episodeId], references: [animePaheId])
  url         String
  quality     Int
  lastUpdated DateTime @default(now()) @updatedAt
  audio       String   @db.VarChar(3) // eng | jpn

  @@id([episodeId, quality, audio])
  @@index([episodeId])
}

model Episode {
  title        String
  animePaheNum Int
  thumbnail    String
  animeKitsuId Int
  sourceTaken  Boolean    @default(false)
  number       Int
  animePaheId  String?    @unique
  skipTimes    SkipTime[]
  anime        Anime      @relation(fields: [animeKitsuId], references: [kitsuId])
  lastUpdated  DateTime   @default(now()) @updatedAt
  length       Float?
  History      History[]
  sources      Source[]

  @@id([animeKitsuId, number])
  @@unique([animePaheNum, animeKitsuId])
  @@index([animeKitsuId])
}

model AnimeRelation {
  role          String
  sourceId      Int
  anime         Anime  @relation(fields: [destinationId], references: [kitsuId])
  destinationId Int

  @@id([sourceId, destinationId])
  @@index([destinationId])
}

model Anime {
  kitsuId        Int     @id
  malId          Int?    @unique
  animePaheId    String?
  synopsis       String  @db.LongText
  ageRating      String
  episodeStart   Int
  available      Boolean @default(true)
  type           String  @default("")
  title_en       String?
  liked          Boolean @default(false)
  title_jp       String?
  rangedEpisodes Int     @default(-1)
  title          String
  posterImg      String
  coverImg       String?
  genres         String  @db.Text // comma seperated values
  score          Float
  episodes       Int
  slug           String?
  poster         Int?

  lastUpdated DateTime        @default(now()) @updatedAt
  relation    AnimeRelation[]
  episode     Episode[]
  history     History[]
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  accentColor String?
  history     History[]
}

model History {
  episodeNumber Int
  animeKitsuId  Int
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  episode       Episode  @relation(fields: [animeKitsuId, episodeNumber], references: [animeKitsuId, number])
  anime         Anime    @relation(fields: [animeKitsuId], references: [kitsuId])
  watchTime     Int
  lastUpdated   DateTime @updatedAt

  @@id([episodeNumber, animeKitsuId, userId])
  @@index([animeKitsuId, episodeNumber])
  @@index([userId])
}
